<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试</title>
      <link href="/2021/123024394.html"/>
      <url>/2021/123024394.html</url>
      
        <content type="html"><![CDATA[<center><h1><font color="red">    金三银四 Java 面试突击专题</font></h1>    === <font size="5">作者：七伊</font> ===</center><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="一、冒泡排序法"><a href="#一、冒泡排序法" class="headerlink" title="一、冒泡排序法"></a>一、冒泡排序法</h3><ul><li>比较相邻的元素，如果第一个比第二个大，就交换它们两个</li><li>对每一对相邻的元素同样的工作，从开始的第一对到结尾的最后一对，这样在最后的元素应该会是最大的数</li><li>针对所有的元素重复以上的步骤，除了最后一个</li><li>重复步骤1~3，直到排序完成</li></ul><h3 id="二、int-和-Integer-有什么区别"><a href="#二、int-和-Integer-有什么区别" class="headerlink" title="二、int 和 Integer 有什么区别"></a>二、int 和 Integer 有什么区别</h3><ol><li><p>Integer是 int 的包装类，int 则是 java 的一种基本数据类型 </p></li><li><p>Integer变量必须实例化后才能使用，而int变量不需要 </p></li><li><p>Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值 </p></li><li><p>Integer的默认值是null，int的默认值是0</p></li><li><p>java在编译Integer i = 100 ;时，会翻译成为Integer i = Integer.valueOf(100)。而java API中对 Integer类型 的 valueOf 的定义如下，对于-128到127之间的数，会进行缓存，Integer i = 127时，会将127这个Integer对象进行缓存，下次再写Integer j = 127时，就会直接从缓存中取，就不会new了</p></li></ol><h3 id="三、-和Equals区别"><a href="#三、-和Equals区别" class="headerlink" title="三、==和Equals区别"></a>三、==和Equals区别</h3><p>==：它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象。基本数据类型 == 比较的是值，引用数据类型 == 比较的是内存地址</p><p>equals()：它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过 ‘’==” 比较这两个对象。</li><li>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来两个对象的内容相等；若它们的内容相等，则返回 true 即认为这两个对象相等</li><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值</li></ul><h3 id="四、8、-amp-和-amp-amp-的区别"><a href="#四、8、-amp-和-amp-amp-的区别" class="headerlink" title="四、8、&amp;和&amp;&amp;的区别?"></a>四、8、&amp;和&amp;&amp;的区别?</h3><p>&amp;运算符有两种用法：(1)按位与;(2)逻辑与。</p><p>&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的,虽然二者都要求运算符左右两端的布尔值都是true 整个表达式的值才是true。&amp;&amp;之所以称为短路运算是因为,如果&amp;&amp;左边的表达式的值是false,右边的表达式会被直接短路掉,不会进行运算。很多时候我们可能都需要用&amp;&amp;而不是&amp;,例如在验证用户登录时判定用户名不是null而且不是空字符串,应当写为: username != null &amp;&amp;!username.equals( “” ), 二者的顺序不能交换,更不能用&amp;运算符,因为第一个条件如果不成立,根本不能进行字符串的equals比较,否则会产生NullPointerException异常。</p><p>注意:逻辑或运算符(1)和短路或运算符(II)的差别也是如此。</p><h3 id="五、hashCode与equals"><a href="#五、hashCode与equals" class="headerlink" title="五、hashCode与equals"></a>五、hashCode与equals</h3><p>hashCode介绍：</p><p>hashCode()的作用是获取哈希码，也成为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode()定义在JDK的Object.java中，Java中的任何类都包含有hashCode()函数</p><p>散列表存储的是键值对（key-value），它的特点是：根据“键”快速的检索出对应的”值“。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><h3 id="六、数组有没有lengthO方法-String-有没有length-方法"><a href="#六、数组有没有lengthO方法-String-有没有length-方法" class="headerlink" title="六、数组有没有lengthO方法? String 有没有length()方法?"></a>六、数组有没有lengthO方法? String 有没有length()方法?</h3><p>数组没有length()方法,有length的属性。String 有length()方法。JavaScript中,获得字符串的长度是通过length属性得到的,这一点容易和Java混淆。</p><h3 id="七、构造器-constructor-是否可被重写-override"><a href="#七、构造器-constructor-是否可被重写-override" class="headerlink" title="七、构造器(constructor)是否可被重写(override)?"></a>七、构造器(constructor)是否可被重写(override)?</h3><p>构造器不能被继承,因此不能被重写,但可以被重载。 </p><h3 id="八、是否可以继承String类"><a href="#八、是否可以继承String类" class="headerlink" title="八、是否可以继承String类?"></a>八、是否可以继承String类?</h3><p>String 类是final类,不可以被继承。</p><h3 id="九、final-有什么用"><a href="#九、final-有什么用" class="headerlink" title="九、final 有什么用?"></a>九、final 有什么用?</h3><p>用于修饰类、属性和方法;</p><ul><li>被final修饰的类不可以被继承</li><li>被final修饰的方法不可以被重写</li><li>被final修饰的变量不可以被改变</li><li>被final修饰不可变的是变量的引用,而不是引用指向的内容,引用指向的内容是可以改变的</li></ul><h3 id="十、final-finally-finalize区别？"><a href="#十、final-finally-finalize区别？" class="headerlink" title="十、final finally finalize区别？"></a>十、final finally finalize区别？</h3><ul><li>final可以修饰类、变量、方法,修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。</li><li>finally一般作用在try-catch代码块中,在处理异常的时候,通常我们将一定要执行的代码方法finally代码块中,表示不管是否出现异常,该代码块都会执行,一股用来存放一些关闭资源的代码。</li><li>finalize是一个方法,属于Object类的一个方法,而Object类是所有类的父类,该方法一般由垃圾回收器来调用,当我们调用System.gc()方法的时候,由垃圾回收器调用finalize(),回收垃圾,个对象是否可回收的最后判断。</li></ul><h3 id="十一、break-continue-return-的区别及作用"><a href="#十一、break-continue-return-的区别及作用" class="headerlink" title="十一、break ,continue ,return 的区别及作用"></a>十一、break ,continue ,return 的区别及作用</h3><ul><li>break 跳出总上一层循环,不再执行循环(结束当前的循环体)</li><li>continue 跳出本次循环,继续执行下次循环(结束正在执行的循环进入下一个循环条件)</li><li>return 程序返回,不再执行下面的代码(结束当前的方法 直接返回)</li></ul><h3 id="十二、重载-Overload-和重写-Override-的区别。"><a href="#十二、重载-Overload-和重写-Override-的区别。" class="headerlink" title="十二、重载(Overload)和重写(Override)的区别。"></a>十二、重载(Overload)和重写(Override)的区别。</h3><p>重载：方法名相同参数列表不同(参数类型不同、个数不同、顺序不同),与方法返回值和访问修饰符无关,重载的方法不能根据返回类型进行区分</p><p>重写：发生在父子类中,方法名、参数列表必须相同,返回值小于等于父类,抛出的异常小于等于父类,访问修饰符大于等于父类(里氏代换原则):如果父类方法访问修饰符为private则子类中就不是重写。</p><h3 id="十三、接口和抽象类的区别、"><a href="#十三、接口和抽象类的区别、" class="headerlink" title="十三、接口和抽象类的区别、"></a>十三、接口和抽象类的区别、</h3><ul><li>默认方法实现：抽象类可以有默认的方法实现；接口不能有默认的方法实现。</li><li>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</li><li>构造函数：抽象类可以有构造函数；接口不能有。</li><li>main方法：抽象类可以有main方法，并且我们能运行它；接口不能有main方法。</li><li>实现数量：类可以实现很多个接口；但只能继承一个抽象类。</li><li>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</li></ul><h3 id="十四、BIO-NIO-AIO-有什么区别"><a href="#十四、BIO-NIO-AIO-有什么区别" class="headerlink" title="十四、BIO, NIO, AIO 有什么区别?"></a>十四、BIO, NIO, AIO 有什么区别?</h3><ul><li>BIO：Block I0 同步阻塞式10,就是我们平常使用的传统10,它的特点是模式简单使用方便,并发处理能力低。</li><li>NIO：New I0同步非阻塞10,是传统10的升级,客户端和服务器端通过Channel (通道)通讯,实现了多路复用。</li><li>AIO：Asynchronous IO 是NIO的升级,也叫 NIO2,实现了异步非堵塞10,异步10的操作基于事件和回调机制。</li></ul><h3 id="十五、-String类的常用方法都有那些"><a href="#十五、-String类的常用方法都有那些" class="headerlink" title="十五、 String类的常用方法都有那些?"></a>十五、 String类的常用方法都有那些?</h3><ul><li>indexOf():返回指定字符的索引。</li><li>charAt():返回指定索引处的字符。</li><li>replace():字符串替换。</li><li>trim():去除字符串两端空白。</li><li>split():分割字符串,返回一个分割后的字符串数组。</li><li>getBytes():返回字符串的byte类型数组。</li><li>length():返回字符串长度。</li><li>toLowerCase():将字符串转成小写字母。</li><li>toUpperCase():将字符串转成大写字符。</li><li>substring():截取字符串。</li><li>equals():字符串比较。 </li></ul><h3 id="十六、Java-常用集合及特点？"><a href="#十六、Java-常用集合及特点？" class="headerlink" title="十六、Java  常用集合及特点？"></a>十六、Java  常用集合及特点？</h3><p>LIst：ArrayList、LinkedList、Vector、Stack。</p><p>Set：LinkedSet、HashSet、TreeSet Queue-&gt;Deque-&gt;LinkedList。</p><p>Map：HashMap、LinkedHashMap、TreeMap Dictionary-&gt;HashTable-&gt;Properties。</p><ul><li>Vector：底层数据结构是数组,查询快,增删慢,线程安全,效率低,默认长度为10,超过会100%延长,变成20,浪费空间。</li><li>ArrayList：基于数组,便于按index访问,超过数组需要扩容,扩容成本较高。</li><li>LinkedList：使用链表实现,无需扩容。</li><li>HashSet：底层数据结构是哈希表(无序,唯一),通过hashcode()和equals()保证元素唯一。</li><li>LinkedHashSet：底层数据结构是链表和哈希表(FIFO插入有序,唯一),由链表保证元素有序,由哈希表保证元素唯一。</li><li>TreeSet：底层数据结构是红黑树(唯一,有序),通过自然排序和比较器排序保证元素有序,根据比较返回值是否是0来保证元素唯一性。</li><li>TreeMap：是有序的。</li><li>HashMap：空间换时间,哈希冲突不大的情况下查找数据性能很高。</li><li>LinkedHashMap：继承自HashMap,对Entry集合添加了一个双向链表。</li></ul><h3 id="十七、List和Set的区别"><a href="#十七、List和Set的区别" class="headerlink" title="十七、List和Set的区别"></a>十七、List和Set的区别</h3><ul><li>List：有序，按照对象进入顺序保存对象，可重复，允许多个Null元素对象，可以使用 Iterator 取出所有元素，再逐一遍历，还可以使用get（int index）获取指定下标的元素</li><li>Set：无序，不可重复，做多允许有一个Null元素对象，取元素时只能用Iterator接口取得所有元素，再逐一遍历各个元素</li></ul><h3 id="十八、List、Set、Map之间的区别是什么？"><a href="#十八、List、Set、Map之间的区别是什么？" class="headerlink" title="十八、List、Set、Map之间的区别是什么？"></a>十八、List、Set、Map之间的区别是什么？</h3><p>三者主要体现在：元素是否有序、是否允许元素重复</p><p>List：元素有序，允许元素重复。</p><p>Set：AbstractSet 和 HashSet都元素无序，TreeSet元素有序（二叉树排序），都不允许元素重复。</p><p>Map：AbstractMap 和 HashMap都元素无序，TreeMap 元素有序（二叉树排序），Key值必须唯一，Value值可以重复。</p><h3 id="十九、ArrayList、LinkedList-、Vector区别"><a href="#十九、ArrayList、LinkedList-、Vector区别" class="headerlink" title="十九、ArrayList、LinkedList 、Vector区别"></a>十九、ArrayList、LinkedList 、Vector区别</h3><ol><li>数据结构 Vector、ArrayList基于动态数组，连续内存存储，适合下标访问，而LinkedList内部使用的是双向链表结构实现。</li><li>LinkedList 适合指定位置插入、删除操作，不适合查找；ArrayList、Vector适合查找，不适合指定位置的插入、删除操作。</li><li>LinkedList 比ArrayList更占内存，因为LinkedList 的节点除了 存储数据，还存储了两个引用，一个指向前一个元素，一个指向后一个元素。</li><li>ArrayList和LinkedList 都是是不同步的不能保证线程安全，Vector方法中加入了synchronized修饰 所以是线程同步，性能较ArrayList差。</li><li>ArrayList在元素填满容器时会自动扩充容器大小的50%，而Vector则是100%，因此 ArrayList 更节省空间</li></ol><h3 id="二十、HashMap的实现原理？"><a href="#二十、HashMap的实现原理？" class="headerlink" title="二十、HashMap的实现原理？"></a>二十、HashMap的实现原理？</h3><p>HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用 null 值和 null 键。此类不保证映射的顺序，特别是它不保证该顺序永恒不变。</p><p>HashMap的数据结构：在Java编程语言中，基本的结构就是两种，一个是数组，另一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列“的数据结构，即数组和链表的结合体。</p><p>HashMap基于Hash算法实现的</p><ol><li>当我们往Hashmap中put元素时，利用key1的hashCode重新hash计算出当前对象的元素在数组中的下标</li><li>存储时，如果出现hash相同的key，有两种情况。</li><li>如果key相同，则覆盖原始值；</li><li>如果key不同，则将当前的key-value放入链表中</li><li>获取时，直接找到hash值对应的下标，再进一步判断key是否相同，从而找到对应值。</li><li>理解了以上过程就不难明白HashMap是如何解决hash冲突的问题，核心就是使用了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。</li></ol><p>需要注意jdk1.8中对HashMap的实现做了优化，当链表中的节点数据超过八个之后，该链表会转为红黑树来提高查询效率，从原来的O（n）到O（logn）</p><h3 id="二十一、HashMap在JDK1-7和JDK1-8中有哪些不同？HashMap的底层实现"><a href="#二十一、HashMap在JDK1-7和JDK1-8中有哪些不同？HashMap的底层实现" class="headerlink" title="二十一、HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现"></a>二十一、HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现</h3><p>在Java中保存数据有两种比较简单的数据结构：数组和链表。数组的特点是：寻址容易，插入和删除困难；链表的特点是：寻址困难，但插入和删除容易；所以我们将数组和链表结合在一起，发挥两者各自的优势，使用一种叫做拉链法的方式解决哈希冲突。</p><p><strong>JDK1.8之前</strong></p><p>JDK1.8采用的是拉链法。拉链法：将链表和数组相结合。也就是创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p><p><strong>JDK1.8之后</strong></p><p>相比于之前的版本，jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转换为红黑树，以减少搜索时间。</p><p><strong>JDK1.7 VS JDK1.8 比较</strong></p><p>JDK1.8主要解决或优化了一下问题：</p><ol><li>resize 扩容优化</li><li>引入了红黑树，目的是避免单条链表过长而影响查询效率，红黑树算法请参考</li><li>解决了多线程死循环问题，但仍是非线程安全的，多线程时可能会造成数据丢失问题。</li></ol><h3 id="二十二、HashMap与HashTable有什么区别？"><a href="#二十二、HashMap与HashTable有什么区别？" class="headerlink" title="二十二、HashMap与HashTable有什么区别？"></a>二十二、HashMap与HashTable有什么区别？</h3><ol><li>线程安全：HashMap是非线程安全的，HashTable是线程安全的；</li><li>效率：因为线程安全的问题, HashMap要比HashTable效率高一点。另外, HashTable基本被淘汰,不要在代码中使用它;</li><li>对Null key 和Null value的支持：HashMap 中, null 可以作为键,这样的键只有一个,可以有一个或多个键所对应的值为null。但是在HashTable 中 put进的键值只要有一个null,直接抛NullPointerException.</li><li>初始容量大小和每次扩充容量大小的不同:<ol><li>创建时如果不指定容量初始值, Hashtable默认的初始大小为11,之后每次扩充,容量变为原来的2n+1. HashMap默认的初始化大小为16。之后每次扩充,容量变为原来的2倍。</li><li>创建时如果给定了容量初始值,那么Hashtable会直接使用你给定的大小,而HashMap会将其扩充为2的幕次方大小。也就是说HashMap总是使用2的幕作为哈希表的大小,后面会介绍到为什么是2的幕次方。</li></ol></li><li>底层数据结构：JDK1.8以后的HashMap在解决哈希冲突时有了较大的变化,当链表长度大于阈值(默认为8)时,将链表转化为红黑树,以减少搜索时间。Hashtable没有这样的机制。</li><li>推荐使用：在Hashtable的类注释可以看到,Hashtable是保留类不建议使用,推荐在单线程环境下使用HashMap替代,如果需要多线程使用则用ConcurrentHashMap替代。 </li></ol><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="一、Spring-特点"><a href="#一、Spring-特点" class="headerlink" title="一、Spring 特点"></a>一、Spring 特点</h3><p>轻量级Java开发框架、依赖注入（DI）、面向切面编程（AOP）</p><h3 id="二、Spring框架中都用到了哪些设计模式？"><a href="#二、Spring框架中都用到了哪些设计模式？" class="headerlink" title="二、Spring框架中都用到了哪些设计模式？"></a>二、Spring框架中都用到了哪些设计模式？</h3><ol><li>工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例</li><li>单例模式：Bean默认为单例模式</li><li>代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术</li><li>模板方法：用来解决代码重复的问题。比如：RestTemplate，JmsTemplate，JpaTemplate</li><li>观察者模式：定义对象键一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都会得到通知被制动更新,如Spring中listener的实现-ApplicationListener</li></ol><h3 id="四、详细讲解一下核心容器（spring-context-应用上下文）模块"><a href="#四、详细讲解一下核心容器（spring-context-应用上下文）模块" class="headerlink" title="四、详细讲解一下核心容器（spring context 应用上下文）模块"></a>四、详细讲解一下核心容器（spring context 应用上下文）模块</h3><ul><li>这是基本的Spring模块，提供spring框架的基础功能，BeanFactory是任何以spring为基础的应用的核心。Spring框架建立在此模块之上，它使Spring成为一个容器。</li><li>Bean工厂是工厂模式的一个实现，提供了控制反转功能，用来把应用的配置和依赖从真正的应用代码中分离。最常用的就是org.springframework.beans.factory.xml.XmlBeanFactory,它根据XML文件中的定义加载beans。该容器从XML文件读取配置元数据并用它去创建一个完全配置的系统或应用。</li></ul><h3 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h3><h3 id="三、Spring-AOP-底层原理"><a href="#三、Spring-AOP-底层原理" class="headerlink" title="三、Spring AOP 底层原理"></a>三、Spring AOP 底层原理</h3><p>aop 底层是采用动态代理机制实现的：接口+实现类</p><ul><li>如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 JDK Proxy，去创建代理对象</li><li>没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 Cgllb 生成一个被代理对象的子类来作为代理。</li></ul><p><strong>就是由代理创建出一个和 Impl 实现类平级的一个对象，但是这个对象不是一个真正的对象，只是一个代理对象，但它可以实现和 Impl 相同的功能，这个就是 aop 的横向机制原理，这样就不需要修改源代码。</strong></p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h3><p>Mybatis中有一级缓存和二级缓存，默认情况下一级缓存是开启的，而且是不能关闭的。一级缓存是指SqlSession级别的缓存，当在同一个SqlSession 中进行相同的SQL语句查询时，第二次以后的查询不会从数据库查询，而是直接从缓存中获取，一级缓存最多缓存1024条SQL。二级缓存是指可以跨SqlSession的缓存。是mapper级别的缓存，对于mapper级别的缓存不同的SqlSession是可以共享的。</p><h3 id="Mybatis的一级缓存原理（SqlSession级别）"><a href="#Mybatis的一级缓存原理（SqlSession级别）" class="headerlink" title="Mybatis的一级缓存原理（SqlSession级别）"></a>Mybatis的一级缓存原理（SqlSession级别）</h3><p>第一次发出一个查询sql，sql查询结果写入SqlSession的一级缓存中，缓存使用的数据结构是一个map。</p><p>key：MapperID+offset+limit+Sql+所有的入参</p><p>value：用户信息</p><p>同一个SqlSession再次发出相同的sql，就从缓存中取出数据。如果两次中间出现commit操作（修改、添加、删除），本SqlSession中的一级缓存区域全部清空，下次再去缓存中查询不到所有要从数据库查询，从数据库查询到再写入缓存。</p><p>二级缓存原理（mapper基本）</p><p>二级缓存的范围是mapper级别（mapper同一个命名空间），mapper以命名空间为单位创建缓存数据结构，结果是map。mybatis的二级缓存是通过CacheExecutor实现的。CacheExecutor其实是Executor的代理对象。所有的查询操作，在CacheExecutor中都会先匹配缓存中是否存在，不存在则查询数据库。</p><p>key：MapperID+offset+limit+Sql+所有的入参</p><p>具体使用需要配置：</p><ol><li>Mybatis全局配置中启用二级缓存配置</li><li>在对应的 Mapper.xml 中配置cache节点</li><li>在对应的 select 查询节点中添加useCache=true</li></ol><h3 id="ORM是什么？"><a href="#ORM是什么？" class="headerlink" title="ORM是什么？"></a>ORM是什么？</h3><p>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单Java对象（POJO）的映射关系的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。</p><h3 id="Mybatis-优缺点"><a href="#Mybatis-优缺点" class="headerlink" title="Mybatis 优缺点"></a>Mybatis 优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>与传统数据库访问技术相比，ORM有以下优点：</p><p>基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用</p><p>与JDBC相比，减少了50%以上的代码量，消除JDBC大量沉余的代码，不需要手动开关连接</p><p>很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p>能够与Spring很好的集成</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求</p><p>SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</p><h3 id="MyBatis的编程步骤是什么样的？"><a href="#MyBatis的编程步骤是什么样的？" class="headerlink" title="MyBatis的编程步骤是什么样的？"></a>MyBatis的编程步骤是什么样的？</h3><ol><li>创建SqlSessionFactory</li><li>通过SqlSessionFactory创建SqlSession</li><li>通过sqlsession执行数据库操作</li><li>调用session.commit()提交事务</li><li>调用session.close()关闭会话</li></ol><h3 id="MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？"><a href="#MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？" class="headerlink" title="MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？"></a>MyBatis是否支持延迟加载？如果支持，它的实现原理是什么？</h3><p>MyBatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</p><p>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName(), 拦截器invoke()方法发现a.getB()是null值,那么就会单独事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b),于是a的对象b属性就有值了，接着完成a .getB().getName()方法的调用。这就是延迟加载的基本原理。</p><h3 id="和-的区别"><a href="#和-的区别" class="headerlink" title="#{}和${}的区别"></a>#{}和${}的区别</h3><ol><li><p>#{}是占位符，预编译处理；${}是拼接符，字符串替换，没有预编译处理。</p></li><li><p>Mybatis在处理#{}时，会将SQL中的#{}替换为？号，调用PreparedStatement的set方法来赋值。</p></li><li><p>Mybatis在处理${}时，就是把${}替换成变量的值。</p></li><li><p>使用#{}可以有效的防止SQL注入，提高系统安全性。</p></li></ol><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="一、JAVA如何开启线程？怎么保证线程安全？"><a href="#一、JAVA如何开启线程？怎么保证线程安全？" class="headerlink" title="一、JAVA如何开启线程？怎么保证线程安全？"></a>一、JAVA如何开启线程？怎么保证线程安全？</h3><p>线程和进程的区别：进程是操作系统进行资源分配的最小单元。线程是操作系统进行任务分配的最小单元，线程隶属于进程。</p><p>如何开启线程？ 1、继承Thread类，重写run方法。 2、实现Runnable接口，实现run方法。3、实现Callable接口，实现call方法。通过FutureTask创建一个线程，获取到线程执行的返回值。4、通过线程池来开启线程。</p><p>怎么保证线程安全？ 加锁：  1、 JVM提供的锁， 也就是Synchronized关键字。 2、 JDK提供的各种锁 Lock。</p><h3 id="二、Volatile和Synchronized有什么区别？Volatile能不能保证线程安全-DCL-Double-Check-Lock-单例为什么要加Volatile"><a href="#二、Volatile和Synchronized有什么区别？Volatile能不能保证线程安全-DCL-Double-Check-Lock-单例为什么要加Volatile" class="headerlink" title="二、Volatile和Synchronized有什么区别？Volatile能不能保证线程安全?DCL(Double Check Lock)单例为什么要加Volatile?"></a>二、Volatile和Synchronized有什么区别？Volatile能不能保证线程安全?DCL(Double Check Lock)单例为什么要加Volatile?</h3><p>1、Synchronized关键字，用来加锁。 Volatile只是保持变量的线程可见性。通常适用于一个线程写，多个线程读的场景。</p><p>2、不能。Volatile关键字只能保证线程可见性， 不能保证原子性。</p><p>3、Volatile防止指令重排。在DCL中，防止高并发情况下，指令重排造成的线程安全问题。</p><blockquote><p>注：</p><p>​    在计算机执行指令的顺序在经过程序编译器编译之后形成的指令序列，一般而言，这个指令序列是会输出确定的结果；以确保每一次的执行都有确定的结果。但是，一般情况下，CPU和编译器为了提升程序执行的效率，会按照一定的规则允许进行指令优化，在某些情况下，这种优化会带来一些执行的逻辑问题，主要的原因是代码逻辑之间是存在一定的先后顺序，在并发执行情况下，会发生二义性，即按照不同的执行逻辑，会得到不同的结果信息。</p></blockquote><h3 id="三、JAVA线程锁机制是怎样的？偏向锁、轻量级锁、重量级锁有什么区别？锁机制是如何升级的？"><a href="#三、JAVA线程锁机制是怎样的？偏向锁、轻量级锁、重量级锁有什么区别？锁机制是如何升级的？" class="headerlink" title="三、JAVA线程锁机制是怎样的？偏向锁、轻量级锁、重量级锁有什么区别？锁机制是如何升级的？"></a>三、JAVA线程锁机制是怎样的？偏向锁、轻量级锁、重量级锁有什么区别？锁机制是如何升级的？</h3><p>1、JAVA的锁就是在对象的Markword中记录一个锁状态。无锁，偏向锁，轻量级锁，重量级锁对应不同的锁状态。</p><p>2、JAVA的锁机制就是根据资源竞争的激烈程度不断进行锁升级的过程。</p><p><img src="/2021/123024394/1615192248858.png" alt="图1 锁机制的升级模式"></p><h3 id="四、谈谈你对AQS的理解。AQS如何实现可重入锁？"><a href="#四、谈谈你对AQS的理解。AQS如何实现可重入锁？" class="headerlink" title="四、谈谈你对AQS的理解。AQS如何实现可重入锁？"></a>四、谈谈你对AQS的理解。AQS如何实现可重入锁？</h3><p>1、AQS是一个JAVA线程同步的框架。是JDK中很多锁工具的核心实现框架。</p><p>2、 在AQS中，维护了一个信号量state和一个线程组成的双向链表队列。其中，这个线程队列，就是用来给线程排队的，而state就像是一个红绿灯，用来控制线程排队或者放行的。 在不同的场景下，有不用的意义。</p><p>3、在可重入锁这个场景下，state就用来表示加锁的次数。0表示无锁，每加一次锁，state就加1。释放锁state就减1。</p><h3 id="五、有A-B-C三个线程，如何保证三个线程同时执行？如何在并发情况下保证三个线程依次执行？如何保证三个线程有序交错进行？"><a href="#五、有A-B-C三个线程，如何保证三个线程同时执行？如何在并发情况下保证三个线程依次执行？如何保证三个线程有序交错进行？" class="headerlink" title="五、有A,B,C三个线程，如何保证三个线程同时执行？如何在并发情况下保证三个线程依次执行？如何保证三个线程有序交错进行？"></a>五、有A,B,C三个线程，如何保证三个线程同时执行？如何在并发情况下保证三个线程依次执行？如何保证三个线程有序交错进行？</h3><p>三个并发工具</p><ol><li><p>CountDownLatch：</p><p>是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程执行完后再执行。例如，应用程序的主线程希望在负责启动框架服务的线程已经启动所有框架服务之后执行。</p><blockquote><p>注：</p><p>CountDownLatch 是通过一个计数器来实现的，计数器的初始化值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就相应得减1。当计数器到达0时，表示所有的线程都已完成任务，然后在闭锁上等待的线程就可以恢复执行任务。 </p></blockquote></li><li><p>CylicBarrier（可重复使用的栅栏）：</p><blockquote><p>现实生活中我们经常会遇到这样的情景，在进行某个活动前需要等待人全部都齐了才开始。例如吃饭时要等全家人都上座了才动筷子，旅游时要等全部人都到齐了才出发，比赛时要等运动员都上场后才开始。</p></blockquote><p><img src="/2021/123024394/20181218144511688.gif" alt="图2 CylicBarrier"></p></li><li><p>Semaphore：</p><p>Semaphore 通常我们叫它信号量， 可以用来控制同时访问特定资源的线程数量，通过协调各个线程，以保证合理的使用资源。</p><blockquote><p>可以把它简单的理解成我们停车场入口立着的那个显示屏，每有一辆车进入停车场显示屏就会显示剩余车位减1，每有一辆车从停车场出去，显示屏上显示的剩余车辆就会加1，当显示屏上的剩余车位为0时，停车场入口的栏杆就不会再打开，车辆就无法进入停车场了，直到有一辆车从停车场出去为止。</p></blockquote></li></ol><h3 id="六、如何对一个字符串快速进行排序？"><a href="#六、如何对一个字符串快速进行排序？" class="headerlink" title="六、如何对一个字符串快速进行排序？"></a>六、如何对一个字符串快速进行排序？</h3><p>Fork/Join框架</p><p>使用归并算法解决排序问题</p><p>排序问题是我们工作中的常见问题。目前也有很多现成算法是为了解决这个问题而被发明的，例如多种插值排序算法、多种交换排序算法。而并归排序算法是目前所有排序算法中，平均时间复杂度较好（O(nlgn)），算法稳定性较好的一种排序算法。它的核心算法思路将大的问题分解成多个小问题，并将结果进行合并。</p><p><img src="/2021/123024394/20170514100831229.png" alt="图3 归并算法排序"></p><p>整个算法的拆分阶段，是将未排序的数字集合，从一个较大集合递归拆分成若干较小的集合，这些较小的集合要么包含最多两个元素，要么就认为不够小需要继续进行拆分。</p><p>那么对于一个集合中元素的排序问题就变成了两个问题：1、较小集合中最多两个元素的大小排序；2、如何将两个有序集合合并成一个新的有序集合。第一个问题很好解决，那么第二个问题是否会很复杂呢？实际上第二个问题也很简单，只需要将两个集合同时进行一次遍历即可完成——比较当前集合中最小的元素，将最小元素放入新的集合，它的时间复杂度为O(n)：</p><p><img src="/2021/123024394/20170514102650111.png" alt="图4 两个集合再次遍历"></p><h2 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h2><h3 id="一、TCP和UDP有什么区别？TCP为什么是三次握手，而不是两次？"><a href="#一、TCP和UDP有什么区别？TCP为什么是三次握手，而不是两次？" class="headerlink" title="一、TCP和UDP有什么区别？TCP为什么是三次握手，而不是两次？"></a>一、TCP和UDP有什么区别？TCP为什么是三次握手，而不是两次？</h3><p><strong>TCP</strong>   Transfer Control Protocol 是一种面向连接的、可靠的、传输层通信协议。</p><p>​    特点： 好比是打电话：面向连接的，点对点的通信，高可靠的，效率比较低，占用的系统资源比较多。</p><p><strong>UDP</strong> User Datagram Protocol 是一种无连接的， 不可靠的、传输层通信协议。 </p><p>​    特点：好比是广播：不需要连接，发送方不管接收方有没有准备好，直接发消息；可以进行广播发送的；传输不可靠，有可能丢失消息；效率比较高；协议就会比较简单，占用的系统资源就比较少。</p><p><strong>TCP建立连接三次握手，断开连接四次挥手</strong>。</p><p>如果是两次握手，可能造成连接资源浪费的情况。</p><h3 id="二、JAVA有哪几种IO模型？有什么区别？"><a href="#二、JAVA有哪几种IO模型？有什么区别？" class="headerlink" title="二、JAVA有哪几种IO模型？有什么区别？"></a>二、JAVA有哪几种IO模型？有什么区别？</h3><p>BIO  同步阻塞IO。 可靠性差，吞吐量低，适用于连接比较少且比较固定的场景。JDK1.4之前唯一的选择。编程模型最简单</p><p>![1615283748011](D:\Program Files (x86)\微信数据\WeChat Files\wxid_q24zbgkbyoi112\FileStorage\File\2022-01\面试题笔记\1615283748011.png)</p><p>NIO 同步非阻塞IO  可靠性比较好，吞吐量也比较高，适用于连接比较多并且连接比较短(轻操作)，例如聊天室。JDK1.4开始支持。编程模型最复杂。</p><p>![1615283827559](D:\Program Files (x86)\微信数据\WeChat Files\wxid_q24zbgkbyoi112\FileStorage\File\2022-01\面试题笔记\1615283827559.png)</p><p>AIO 异步非阻塞IO 可靠性是最好的，吞吐量也是非常高。适用于连接比较多，并且连接比较长(重操作)。例如 相册服务器。JDK7版本才支持的。编程模型比较简单，需要操作系统来支持。</p><p>![1615283938818](D:\Program Files (x86)\微信数据\WeChat Files\wxid_q24zbgkbyoi112\FileStorage\File\2022-01\面试题笔记\1615283938818.png)</p><p>同步 、异步- 针对请求 和 阻塞、非阻塞 - 针对客户端。</p><p>在一个网络请求中，客户端会发一个请求到服务端。</p><p>1、客户端发了请求后，就一直等着服务端响应。客户端：阻塞。  请求：同步</p><p>2、客户端发了请求后，就去干别的事情了。时不时的过来检查服务端是否给出了相应。 客户端：非阻塞。 请求：同步。</p><p>3、换成异步请求。客户端发了请求后，就坐在椅子上，等着服务端返回响应。 客户端：阻塞。 请求：异步</p><p>4、客户端发了请求后，就去干别的事情了。等到服务端给出响应后，再过来处理业务逻辑。 客户端；非阻塞。 请求：异步。</p><h3 id="三、JAVA-NIO的几个核心组件是什么？分别有什么作用？"><a href="#三、JAVA-NIO的几个核心组件是什么？分别有什么作用？" class="headerlink" title="三、JAVA NIO的几个核心组件是什么？分别有什么作用？"></a>三、JAVA NIO的几个核心组件是什么？分别有什么作用？</h3><p>Channel   Buffer  Selector</p><p>![1615285442570](D:\Program Files (x86)\微信数据\WeChat Files\wxid_q24zbgkbyoi112\FileStorage\File\2022-01\面试题笔记\1615285442570.png)</p><p>channel类似于一流。 每个channel对应一个buffer缓冲区。channel会注册到selector。</p><p>select会根据channel上发生的读写事件，将请求交由某个空闲的线程处理。selector对应一个或者多个线程。</p><p>Buffer和Channel都是可读可写的。</p><h3 id="四、select，poll和epoll有什么区别？"><a href="#四、select，poll和epoll有什么区别？" class="headerlink" title="四、select，poll和epoll有什么区别？"></a>四、select，poll和epoll有什么区别？</h3><p>他们是NIO中多路复用的三种实现机制，是由Linux操作系统提供的。</p><p>用户空间和内核空间：操作系统为了保护系统安全，将内核划分为两个部分，一个是用户空间，一个是内核空间。用户空间不能直接访问底层的硬件设备，必须通过内核空间。</p><p>文件描述符 File Descriptor(FD)：是一个抽象的概念，形式上是一个整数，实际上是一个索引值。指向内核中为每个进程维护进程所打开的文件的记录表。当程序打开一个文件或者创建一个文件时， 内核就会向进程返回一个FD。Unix,Linux</p><p>​    select机制： 会维护一个FD的结合 fd_set。将fd_set从用户空间复制到内核空间，激活socket。 x64 2048 fd_set是一个数组结构</p><p>​    Poll机制： 和selecter机制是差不多的，把fd_set结构进行了优化，FD集合的大小就突破了操作系统的限制。 pollfd结构来代替fd_set，通过链表实现的。</p><p>​    EPoll：Event Poll.Epoll不再扫描所有的FD，只将用户关心的FD的事件存放到内核的一个事件表当中。这样，可以减少用户空间与内核空间之前需要拷贝的数据。</p><br><p>简单总结：</p><p>​                操作方式        底层实现            最大连接数            IO效率</p><p>select:    遍历                    数组                受限于内核            一般</p><p>poll        遍历                    链表                    无上限                一般</p><p>epoll    事件回调                红黑树                无上限                高</p><br><p>java的NIO当中是用的那种机制？  </p><p>可以查看DefaultSelectorProvider源码。在windows下，WindowsSelectorProvider。而Linux下，根据Linux的内核版本，2.6版本以上，就是EPollSelectorProvider， 否则就是默认的PollSelectorProvider.</p><p>select 1984年出现，  poll   1997年出现， EPoll 2002年</p><h3 id="五、描述下HTTP和HTTPS的区别。"><a href="#五、描述下HTTP和HTTPS的区别。" class="headerlink" title="五、描述下HTTP和HTTPS的区别。"></a>五、描述下HTTP和HTTPS的区别。</h3><p>HTTP： 是互联网上应用最为广泛的一种网络通信协议，基于TCP，可以使浏览器工作更为高效，减少网络传输。</p><p>HTTPS： 是HTTP的加强版，可以认为是HTTP+SSL(Secure Socket Layer)。在HTTP的基础上增加了一系列的安全机制。一方面保证数据传输安全，另一位方面对访问者增加了验证机制。是目前现行架构下，最为安全的解决方案。</p><p>主要区别：</p><p>​    1、HTTP的连接是简单无状态的，HTTPS的数据传输是经过证书加密的，安全性更高。</p><p>​    2、HTTP是免费的， 而HTTPS需要申请证书，而证书通常是需要收费的，并且费用一般不低。</p><p>​    3、他们的传输协议不通过，所以他们使用的端口也是不一样的， HTTP默认是80端口，而HTTPS默认是443端口。</p><p>HTTPS的缺点：</p><p>​    1、HTTPS的握手协议比较费时，所以会影响服务的响应速度以及吞吐量。</p><p>​    2、HTTPS也并不是完全安全的。他的证书体系其实并不是完全安全的。并且HTTPS在面对DDOS这样的攻击时，几乎起不到任何作用。</p><p>​    3、证书需要费钱，并且功能越强大的证书费用越高。</p><h2 id="JVM调优篇"><a href="#JVM调优篇" class="headerlink" title="JVM调优篇"></a>JVM调优篇</h2><h3 id="一、说一说JVM的内存模型。"><a href="#一、说一说JVM的内存模型。" class="headerlink" title="一、说一说JVM的内存模型。"></a>一、说一说JVM的内存模型。</h3><p><img src="/2021/123024394/1615444089221.png" alt="1615444089221"></p><p><img src="/2021/123024394/1615444683378.png" alt="1615444683378"></p><h3 id="二、JAVA类加载的全过程是怎样的？什么是双亲委派机制？有什么作用？"><a href="#二、JAVA类加载的全过程是怎样的？什么是双亲委派机制？有什么作用？" class="headerlink" title="二、JAVA类加载的全过程是怎样的？什么是双亲委派机制？有什么作用？"></a>二、JAVA类加载的全过程是怎样的？什么是双亲委派机制？有什么作用？</h3><p>JAVA的类加载器： AppClassloader -&gt; ExtClassloader -&gt; BootStrap Classloader</p><p>每种类加载器都有他自己的加载目录。</p><p>JAVA中的类加载器： AppClassLoader , ExtClassLoader -&gt; URLClassLoader -&gt;SecureClassLoader -&gt; ClassLoader</p><p>每个类加载器对他加载过的类，都是有一个缓存的。</p><p>双亲委派：向上委托查找，向下委托加载。  作用：保护JAVA的层的类不会被应用程序覆盖。</p><p>类加载过程：  加载 -》 连接 -》 初始化</p><p>加载：把Java的字节码数据加载到JVM内存当中，并映射成JVM认可的数据结构。</p><p>连接：分为三个小的阶段：</p><p> 1、验证：检查加载到的字节信息是否符合JVM规范。<br> 2、准备： 创建类或接口的静态变量，并赋初始值   半初始化状态<br> 3、解析：把符号引用转为直接引用</p><p>初始化：自己写的代码执行 </p><h3 id="一个对象从加载到JVM，再到被GC清除，都经历了什么过程？"><a href="#一个对象从加载到JVM，再到被GC清除，都经历了什么过程？" class="headerlink" title="一个对象从加载到JVM，再到被GC清除，都经历了什么过程？"></a>一个对象从加载到JVM，再到被GC清除，都经历了什么过程？</h3><p>method{  ClassLoaderDemo1 c =new ClassLoaderDemo1();  c.xxx}    GC </p><p>1、用户创建一个对象，JVM首先需要到方法区去找对象的类型信息。然后再创建对象。</p><p>2、JVM要实例化一个对象，首先要在堆当中先创建一个对象。-&gt; 半初始化状态</p><p>3、对象首先会分配在堆内存中新生代的Eden。然后经过一次Minor GC，对象如果存活，就会进入S区。在后续的每次GC中，如果对象一直存活，就会在S区来回拷贝，每移动一次，年龄加1。-&gt; 多大年龄才会移入老年代？  年龄最大15， 超过一定年龄后，对象转入老年代。</p><p>4、当方法执行结束后，栈中的指针会先移除掉。</p><p>5、堆中的对象，经过Full GC，就会被标记为垃圾，然后被GC线程清理掉。</p><h3 id="三、怎么确定一个对象到底是不是垃圾？-什么是GC-Root"><a href="#三、怎么确定一个对象到底是不是垃圾？-什么是GC-Root" class="headerlink" title="三、怎么确定一个对象到底是不是垃圾？ 什么是GC Root?"></a>三、怎么确定一个对象到底是不是垃圾？ 什么是GC Root?</h3><p>有两种定位垃圾的方式：</p><p>1、引用计数： 这种方式是给堆内存当中的每个对象记录一个引用个数。引用个数为0的就认为是垃圾。这是早期JDK中使用的方式。引用计数无法解决循环引用的问题。</p><p>2、根可达算法： 这种方式是在内存中，从引用根对象向下一直找引用，找不到的对象就是垃圾。</p><p>哪些是GC Root？ Stack -&gt; JVM Stack, Native Stack， class类， run-time constant pool 常量池， static reference 静态变量。</p><h3 id="四、JVM有哪些垃圾回收算法？"><a href="#四、JVM有哪些垃圾回收算法？" class="headerlink" title="四、JVM有哪些垃圾回收算法？"></a>四、JVM有哪些垃圾回收算法？</h3><p>MarkSweep 标记清除算法</p><p><img src="/2021/123024394/1615528007814.png" alt="MarkSweep 标记清除算法"></p><p>这个算法分为两个阶段，标记阶段：把垃圾内存标记出来，清除阶段：直接将垃圾内存回收。</p><p>这种算法是比较简单的，但是有个很严重的问题，就是会产生大量的内存碎片。</p><p>Copying 拷贝算法</p><p><img src="/2021/123024394/1615528196141.png" alt="Copying 拷贝算法"></p><p>为了解决标记清除算法的内存碎片问题，就产生了拷贝算法。拷贝算法将内存分为大小相等的两半，每次只使用其中一半。垃圾回收时，将当前这一块的存活对象全部拷贝到另一半，然后当前这一半内存就可以直接清除。</p><p>这种算法没有内存碎片，但是他的问题就在于浪费空间。而且，他的效率跟存货对象的个数有关。</p><p>MarkCompack 标记压缩算法</p><p><img src="/2021/123024394/1615528400021.png" alt="MarkCompack 标记压缩算法"></p><p>为了解决拷贝算法的缺陷，就提出了标记压缩算法。这种算法在标记阶段跟标记清除算法是一样的，但是在完成标记之后，不是直接清理垃圾内存，而是将存活对象往一端移动，然后将端边界以外的所有内存直接清除。</p><p>这三种算法各有利弊，各自有各自的适合场景。</p><h3 id="五、JVM有哪些垃圾回收器？他们都是怎么工作的？什么是STW？他都发生在哪些阶段？什么是三色标记？如何解决错标记和漏标记的问题？为什么要设计这么多的垃圾回收器？"><a href="#五、JVM有哪些垃圾回收器？他们都是怎么工作的？什么是STW？他都发生在哪些阶段？什么是三色标记？如何解决错标记和漏标记的问题？为什么要设计这么多的垃圾回收器？" class="headerlink" title="五、JVM有哪些垃圾回收器？他们都是怎么工作的？什么是STW？他都发生在哪些阶段？什么是三色标记？如何解决错标记和漏标记的问题？为什么要设计这么多的垃圾回收器？"></a>五、JVM有哪些垃圾回收器？他们都是怎么工作的？什么是STW？他都发生在哪些阶段？什么是三色标记？如何解决错标记和漏标记的问题？为什么要设计这么多的垃圾回收器？</h3><p>STW: Stop-The-World。是在垃圾回收算法执行过程当中，需要将JVM内存冻结的一种状态。在STW状态下，JAVA的所有线程都是停止执行的-GC线程除外，native方法可以执行，但是，不能与JVM交互。GC各种算法优化的重点，就是减少STW，同时这也是JVM调优的重点。</p><p>JVM的垃圾回收器：</p><p><img src="/2021/123024394/1615529709014.png" alt="1615529709014"></p><p>Serial 串行</p><p><img src="/2021/123024394/1615529799127.png" alt="1615529799127"></p><p>整体过程比较简单，就像踢足球一样，需要GC时，直接暂停，GC完了再继续。</p><p>这个垃圾回收器，是早期垃圾回收器，只有一个线程执行GC。在多CPU架构下，性能就会下降严重。只适用于几十兆的内存空间。</p><p>Parallel 并行</p><p><img src="/2021/123024394/1615529996661.png" alt="1615529996661"></p><p>在串行基础上，增加多线程GC。PS+PO这种组合是JDK1.8默认的垃圾回收器。在多CPU的架构下，性能会比Serial高很多。</p><p>CMS Concurrent Mark Sweep</p><p><img src="/2021/123024394/1615519911489.png" alt="1615530293431"></p><p>核心思想，就是将STW打散，让一部分GC线程与用户线程并发执行。 整个GC过程分为四个阶段</p><p>1、初始标记阶段：STW 只标记出根对象直接引用的对象。</p><p>2、并发标记：继续标记其他对象，与应用程序是并发执行。</p><p>3、重新标记： STW 对并发执行阶段的对象进行重新标记。</p><p>4、并发清除：并行。将产生的垃圾清除。清除过程中，应用程序又会不断的产生新的垃圾，叫做浮动垃圾。这些垃圾就要留到下一次GC过程中清除。</p><p>G1 Garbage First 垃圾优先</p><p><img src="/2021/123024394/1615530672428.png" alt="1615530672428"></p><p>他的内存模型是实际不分代，但是逻辑上是分代的。在内存模型中，对于堆内存就不再分老年代和新生代，而是划分成一个一个的小内存块，叫做Region。每个Region可以隶属于不同的年代。</p><p>GC分为四个阶段：</p><p>第一：初始标记 标记出GCRoot直接引用的对象。STW</p><p>第二：标记Region，通过RSet标记出上一个阶段标记的Region引用到的Old区Region。</p><p>第三：并发标记阶段：跟CMS的步骤是差不多的。只是遍历的范围不再是整个Old区，而只需要遍历第二步标记出来的Region。</p><p>第四：重新标记： 跟CMS中的重新标记过程是差不多的。</p><p>第五：垃圾清理：与CMS不同的是，G1可以采用拷贝算法，直接将整个Region中的对象拷贝到另一个Region。而这个阶段，G1只选择垃圾较多的Region来清理，并不是完全清理。</p><p>CMS的核心算法就是<strong>三色标记</strong>。</p><p>三色标记：是一种逻辑上的抽象。将每个内存对象分成三种颜色： 黑色：表示自己和成员变量都已经标记完毕。 灰色：自己标记完了，但是成员变量还没有完全标记完。白色：自己未标记完。</p><p>CMS通过增量标记 increment update 的方式来解决漏标的问题。</p><h3 id="六、如何进行JVM调优？JVM参数有哪些？怎么查看一个JAVA进程的JVM参数？谈谈你了解的JVM参数。如果一个java程序每次运行一段时间后，就变得非常卡顿，你准备如何对他进行优化？"><a href="#六、如何进行JVM调优？JVM参数有哪些？怎么查看一个JAVA进程的JVM参数？谈谈你了解的JVM参数。如果一个java程序每次运行一段时间后，就变得非常卡顿，你准备如何对他进行优化？" class="headerlink" title="六、如何进行JVM调优？JVM参数有哪些？怎么查看一个JAVA进程的JVM参数？谈谈你了解的JVM参数。如果一个java程序每次运行一段时间后，就变得非常卡顿，你准备如何对他进行优化？"></a>六、如何进行JVM调优？JVM参数有哪些？怎么查看一个JAVA进程的JVM参数？谈谈你了解的JVM参数。如果一个java程序每次运行一段时间后，就变得非常卡顿，你准备如何对他进行优化？</h3><p>JVM调优主要就是通过定制JVM运行参数来提高JAVA应用程度的运行数据</p><p>JVM参数大致可以分为三类：</p><p>1、 标注指令： -开头，这些是所有的HotSpot都支持的参数。可以用java -help 打印出来。</p><p>2、非标准指令： -X开头，这些指令通常是跟特定的HotSpot版本对应的。可以用java -X 打印出来。</p><p>3、不稳定参数： -XX 开头，这一类参数是跟特定HotSpot版本对应的，并且变化非常大。详细的文档资料非常少。在JDK1.8版本下，有几个常用的不稳定指令：</p><p> java -XX:+PrintCommandLineFlags ： 查看当前命令的不稳定指令。</p><p>java -XX:+PrintFlagsInitial ： 查看所有不稳定指令的默认值。</p><p>java -XX:+PrintFlagsFinal： 查看所有不稳定指令最终生效的实际值。</p>]]></content>
      
      
      <categories>
          
          <category> Java 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2021/122724394.html"/>
      <url>/2021/122724394.html</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="什么是JVM"><a href="#什么是JVM" class="headerlink" title="什么是JVM?"></a>什么是JVM?</h2><p>定义：</p><p>Java Virtual Machine - java 程序的运行环境（java 二进制字节码的运行环境）</p><p>好处：</p><ul><li>一次编写，到处运行</li><li>自动内存管理，垃圾回收功能</li><li>数组下标越界越界检查（数组下标越界抛异常和数组新元素覆盖了程序的其他部分哪个更严重，显然是后者，之前编写代码没有数组下标越界检查，程序员必须自己小心的检查数组下标越界，但是如果我们一不小心数组下标越界很有可能覆盖其他代码的内存）</li><li>多态</li></ul><p>比较：</p><p>jvm - jre - jdk 比较</p><p><img src="/2021/122724394/jvm+jre+jdk_20211227212137.png" alt="图1 jvm+jre+jdk比较"></p><h2 id="学习-JVM-有什么用？"><a href="#学习-JVM-有什么用？" class="headerlink" title="学习 JVM 有什么用？"></a>学习 JVM 有什么用？</h2><ul><li>面试</li><li>理解底层的实现原理</li><li>中高级程序员的必备技能</li></ul><h2 id="常见的-JVM"><a href="#常见的-JVM" class="headerlink" title="常见的 JVM"></a>常见的 JVM</h2><p><img src="/2021/122724394/changjianjvm.png" alt="图2 jvm+jre+jdk比较"></p><blockquote><p><a href="https://en.wikipedia.org/wiki/Comparison_of_Java_virtual_machines">维基百科参考</a></p></blockquote><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><p><img src="/2021/122724394/xuexiluxian.png" alt="图3 学习路线"></p><blockquote><p>[参考资料](<a href="https://www.javainterviewpoint.com/java-virtual-machine-architecture-in-java/">Java Virtual Machine Architecture in Java (javainterviewpoint.com)</a>)</p></blockquote><p>JVM 分三大块：</p><ul><li><p>类加载器块</p><ul><li>Java Class ： 从 <strong>Java 源代码</strong>编译为 Java 的二进制字节码之后</li><li>ClassLoader ： 经过<strong>类加载器</strong>才能被加载到我们的 JVM 里去运行</li></ul></li><li><p>JVM 内存结构：</p><ul><li>Method Area【方法区】：<strong>类</strong>都放在方法区的部分</li><li>Heap【堆】：<strong>类创建的实例、对象</strong>放在堆的部分，而堆里面的这些对象在调用方法时候会用到<strong>下面三个</strong></li><li>JVM Stacks【虚拟机栈】：</li><li>PC Register【程序计数器】：</li><li>Native Method Stacks 【本地方法栈】：</li></ul></li><li><p>执行引擎：</p><ul><li>Interpreter【解释器】：方法执行时，每行代码是由<strong>解释器</strong>逐行进行执行</li><li>JIT Compiler【即时编译器】：方法里的一些热点代码，频繁调用的代码会由即时编译器进行编译，优化后的执行</li><li>GC【垃圾回收】：它会对堆里面一些不再被引用的对象进行垃圾回收</li></ul></li><li><p>本地方法接口：还会有一些 java 代码不方便实现的功能，必须调用底层操作系统的功能，借助本地方法接口调用操作系统提供的功能和方法</p></li></ul><h1 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h1><h2 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1. 程序计数器"></a>1. 程序计数器</h2><p><img src="/2021/122724394/chengxujishuqi_20211227221605.png" alt="图4 程序计数器"></p><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>Program Counter Register 程序计数器（寄存器）</p><ul><li>作用：记住下一条 jvm 指令的执行地址</li><li>特点<ul><li>是线程私有的</li><li>不会存在内存溢出（<strong>唯一一个不会存在内存溢出的区</strong>）</li></ul></li></ul><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h3><p><img src="/2021/122724394/chengxujishuqizuoyong_20211227223227.png" alt="图5 作用"></p><p>线程私有图示：</p><p><img src="/2021/122724394/xianchengsiyoutushi_20211227230510.png" alt="图6 线程私有图示"></p><h2 id="2-虚拟机栈"><a href="#2-虚拟机栈" class="headerlink" title="2. 虚拟机栈"></a>2. 虚拟机栈</h2><p><img src="/2021/122724394/xunijizhan_20211228133716.png" alt="图7 虚拟机栈"></p><p>栈规则：<strong>先进后出</strong></p><p><img src="/2021/122724394/zhanguize_20211228134107.png" alt="图8 栈的规则"></p><p><img src="/2021/122724394/zhandeneicunkongjian_20211228143311.png" alt="图9 栈的内存空间"></p><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>Java Virtual Machine Stacks （Java 虚拟机栈）</p><ul><li>每个线程运行时所需要的内存，称为虚拟机栈</li><li>每个栈由多个栈帧（Frame）组成，对应着每个方法调用时所占用的内存</li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</li></ul><h4 id="问题辨析"><a href="#问题辨析" class="headerlink" title="问题辨析"></a>问题辨析</h4><ol><li><p>垃圾回收是否涉及栈内存？</p><p><strong>栈内存就是一次次的方法调用产生的栈帧内存，栈帧内存在每次方法调用结束后都会被弹出栈，会自动的回收掉，根本不需要垃圾回收来管理栈内存</strong></p><p><strong>垃圾回收只是回收堆内存中的无用对象，栈内存不会也不需要对它进行垃圾回收的处理</strong></p></li><li><p>栈内存分配越大越好吗？</p><p><strong>栈内存越大反而线程数越少，划分大通常是为了更多次的方法递归调用，不会增强你的运行效率</strong></p></li><li><p>方法内的局部变量是否线程安全？</p><ul><li>如果方法内局部变量没有逃离方法的作用访问，它是线程安全的</li></ul><p><img src="/2021/122724394/20211228162329.png" alt="图10 方法内局部变量,线程安全"></p><ul><li>如果局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全</li></ul><p><img src="/2021/122724394/20211228162518.png" alt="图11 局部变量引用了对象,逃离方法作用范围,需考虑线程安全"></p></li></ol><h3 id="2-2-栈内存溢出"><a href="#2-2-栈内存溢出" class="headerlink" title="2.2 栈内存溢出"></a>2.2 栈内存溢出</h3><ul><li>栈帧过多导致栈内存溢出</li></ul><p><img src="/2021/122724394/zhanneicunyichu_20220104160946.png" alt="图12 栈帧过多"></p><ul><li>栈帧过大导致栈内存溢出</li></ul><p><img src="/2021/122724394/zhanzhenguoda_20220104161553.png" alt="图13 栈帧过大"></p><h3 id="2-3-线程运行诊断"><a href="#2-3-线程运行诊断" class="headerlink" title="2.3 线程运行诊断"></a>2.3 线程运行诊断</h3><h4 id="案例1：cpu-占用过多"><a href="#案例1：cpu-占用过多" class="headerlink" title="案例1：cpu 占用过多"></a>案例1：cpu 占用过多</h4><p>定位：</p><ul><li>用top定位哪个进程对cpu的占用过高</li><li><code>ps H -eo pid,tid,%cpu|grep 进程 id</code>（用 ps 命令进一步定位是哪个线程引起的cpu占用过高）</li><li>jstack 进程id<ul><li>可以根据线程id找到有问题的线程，进一步定位到问题代码的源码行号</li></ul></li></ul><h4 id="案例2：程序运行很长时间没有结果"><a href="#案例2：程序运行很长时间没有结果" class="headerlink" title="案例2：程序运行很长时间没有结果"></a>案例2：程序运行很长时间没有结果</h4><p>死锁：</p><p><img src="/2021/122724394/sisuo_20220105164042.png" alt="图14 死锁"></p><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3. 本地方法栈"></a>3. 本地方法栈</h2><p>例子：Object 类</p><p>为本地方法运行提供空间</p><p><img src="/2021/122724394/bendifangfazhan_20220105164339.png" alt="图15 本地方法栈"></p><h2 id="4-堆"><a href="#4-堆" class="headerlink" title="4. 堆"></a>4. 堆</h2><p><img src="/2021/122724394/dui_20220105164240.png" alt="图16 堆"></p><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>Heap 堆</p><ul><li>通过 new 关键字，创建对象都会使用堆内存</li></ul><p>特点</p><ul><li>它是线程共享的，堆中对象都需要考虑线程安全的问题</li><li>有垃圾回收机制</li></ul><h3 id="4-2-堆内存溢出"><a href="#4-2-堆内存溢出" class="headerlink" title="4.2 堆内存溢出"></a>4.2 堆内存溢出</h3><h4 id="演示堆内存："><a href="#演示堆内存：" class="headerlink" title="演示堆内存："></a>演示堆内存：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 演示堆内存 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1_4</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10 Mb</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array <span class="token operator">=</span> null<span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>1000000L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>jps 工具</p><ul><li><p>查看当前系统中有哪些 java 进程</p><p><img src="/2021/122724394/jps_20220106142210.png" alt="图17 查看当前系统中有哪些 java 进程"></p></li></ul></li><li><p>jmap 工具</p><ul><li><p>查看堆内存占用情况 jmap -heap 进程 id</p><p><img src="/2021/122724394/jmap_20220106142821.png" alt="图18 打印了 &quot;1...&quot; 之后"></p><p><img src="/2021/122724394/jmap_2_20220106143450.png" alt="图19 打印了 &quot;2...&quot; 之后"></p><p><img src="/2021/122724394/jmap_3_20220106143648.png" alt="图20 打印了 &quot;3...&quot; 之后"></p></li></ul></li><li><p>jconsole 工具</p><ul><li><p>图形界面的，多功能的监测工具，可以连续监测</p><p><img src="/2021/122724394/jconsole_20220106143952.png" alt="图21 jconsole 多功能检测工具"></p></li></ul></li></ol><h4 id="案例：垃圾回收后，内存占用依然很高"><a href="#案例：垃圾回收后，内存占用依然很高" class="headerlink" title="案例：垃圾回收后，内存占用依然很高"></a>案例：垃圾回收后，内存占用依然很高</h4><p>不看代码的情况下推出哪里存在问题</p><ol><li>用 jps 查看进程 id ，再通过 tid 查询当前进程内存情况</li></ol><p><img src="/2021/122724394/jps_anli_20220106145631.png" alt="图22 找当前系统进程的内存情况"></p><p><img src="/2021/122724394/jmap_xin_20220106145950.png" alt="图23 堆内存情况"></p><p><img src="/2021/122724394/jmap_old_20220106151138.png"></p><ol start="2"><li>用 jconsole 软件执行 GC 垃圾回收，执行之后从250 Mb 降到了 210Mb</li></ol><p><img src="/2021/122724394/gs_20220106160626.png" alt="图24 执行 GC"></p><ol start="3"><li><p>再用 jmap 查看进程的内存情况，发现新生代确实内存回收了，老年代还有200多Mb</p><p><img src="/2021/122724394/gc_zhihou_20220106161656.png" alt="图25 执行 GC 后，再次 jmap 查询内存情况"></p><p><img src="/2021/122724394/gc_zhihou2_20220106161932.png"></p></li><li><p>采取新路子 jvisualvm ，截取那一时刻内存信息，查找20个保留的最大对象</p><p><img src="/2021/122724394/jvisualvm_20220106163623.png" alt="图26 运行 jvisualvm 可视化工具"></p><p><img src="/2021/122724394/jvisualvm_dump_20220106163848.png" alt="图27 那一时刻堆的内存信息进行截取"></p><p><img src="/2021/122724394/chazhao_20220106164142.png" alt="图28 查找20个保留的最大对象"></p></li><li><p>发现最大占用内存的对象，</p><p><img src="/2021/122724394/chazhaohou_20220106164319.png" alt="图29 查找后发现最大占用内存的对象"></p><p><img src="/2021/122724394/209_20220106164435.png" alt="图30 占用内存209 Mb，内含有200的对象"></p></li><li><p>代码部分</p><p><img src="/2021/122724394/daima_20220106165453.png" alt="图31 代码部分"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JVM </category>
          
          <category> 必须掌握 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 必须掌握 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rabbit-MQ</title>
      <link href="/2021/112924394.html"/>
      <url>/2021/112924394.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-消息队列"><a href="#1-消息队列" class="headerlink" title="1. 消息队列"></a>1. 消息队列</h1><h2 id="1-1MQ-的相关概念"><a href="#1-1MQ-的相关概念" class="headerlink" title="1.1MQ 的相关概念"></a>1.1MQ 的相关概念</h2><h3 id="1-1-1-什么是-MQ"><a href="#1-1-1-什么是-MQ" class="headerlink" title="1.1.1 什么是 MQ"></a>1.1.1 什么是 MQ</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;MQ(message queue),从字面意思上看,本质是个队列, FIFO先入先出,只不过队列中存放的内容是message而已,还是一种跨进程的通信机制,用于上下游传递消息。在互联网架构中, MQ是一种非常常见的上下游”逻辑解耦+物理解耦”的消息通信服务。使用了MQ之后,消息发送上游只需要依赖MQ.不用依赖其他服务。</p><h3 id="1-1-2-为什么要用-MQ"><a href="#1-1-2-为什么要用-MQ" class="headerlink" title="1.1.2 为什么要用 MQ"></a>1.1.2 为什么要用 MQ</h3><ol><li><p>流量消峰</p><p>&nbsp;&nbsp;&nbsp;&nbsp;举个例子,如果订单系统最多能处理一万次订单,这个处理能力应付正常时段的下单时绰绰有余,正常时段我们下单一秒后就能返回结果。但是在高峰期,如果有两万次下单操作系统是处理不了的,只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲,我们可以取消这个限制,把一秒内下的订单分散成一段时间来处理,这时有些用户可能在下单十几秒后才能收到下单成功的操作,但是比不能下单的体验要好。</p><p><img src="/2021/112924394/liuliangxiaofeng_20211129153939.png" alt="图1 流量消峰"></p></li><li><p>应用解耦</p><p>&nbsp;&nbsp;&nbsp;&nbsp;以电商应用为例,应用中有订单系统、库存系统、物流系统支付系统。用户创建订单后,如果耦合调用库存系统、物流系统、支付系统,任何一个子系统出了故障,都会造成下单操作异常。当转变成基于消息队列的方式后,系统间调用的问题会减少很多,比如物流系统因为发生故障,需要几分钟来修复。在这几分钟的时间里,物流系统要处理的内存被缓存在消息队列中,用户的下单操作可以正常完成。当物流系统恢复后,继续处理订单信息即可,中单用户感受不到物流系统的故障,提升系统的可用性。</p><p><img src="/2021/112924394/yingyongjieou_20211129160139.png" alt="图2 应用解耦"></p></li><li><p>异步处理</p><p>&nbsp;&nbsp;&nbsp;&nbsp;有些服务间调用是异步的,例如A调用B, B需要花费很长时间执行,但是A需要知道B什么时候可以执行完,以前一般有两种方式, A过一段时间去调用B的查询api查询。或者A提供一个callback api,B执行完之后调用api通知A服务。这两种方式都不是很优雅,使用消息总线,可以很方便解决这个问题,A调用B服务后,只需要监听B处理完成的消息,当B处理完成后,会发送一条消息给MQ, MQ会将此消息转发给A服务。这样A服务既不用循环调用B的查询api,也不用提供callback api,同样B服务也不用做这些操作。A服务还能及时的得到异步处理成功的消息。</p><p><img src="/2021/112924394/yibuchuli_20211129162909.png" alt="图3 异步处理"></p></li></ol><h3 id="1-1-3-MQ-的分类"><a href="#1-1-3-MQ-的分类" class="headerlink" title="1.1.3 MQ 的分类"></a>1.1.3 MQ 的分类</h3><ol><li><p>ActiveMQ</p><p>&nbsp;&nbsp;&nbsp;&nbsp;优点：单机吞吐量万级,时效性ms级,可用性高,基于主从架构实现高可用性,消息可靠性较低的概率丢失数据。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;缺点：官方社区现在对ActiveMQ 5.x<strong>维护越来越少,高吞吐量场景较少使用</strong>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;尚硅谷官网视频: <a href="http://www.gulixueyuan.com/course/322">http://www.gulixueyuan.com/course/322</a></p></li><li><p>Kafka</p><p>&nbsp;&nbsp;&nbsp;&nbsp;大数据的杀手锏,谈到大数据领域内的消息传输,则绕不开Kafka,这款为<strong>大数据而生</strong>的消息中间件以其<strong>百万级TPS</strong>的吞吐量名声大噪,迅速成为大数据领域的宠儿,在数据采集、传输、存储的过程中发挥着举足轻重的作用。目前已经被LinkedIn, Uber, Twitter, Netflix等大公司所采纳。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;优点：性能卓越,单机写入TPS约在百万条/秒,最大的优点,就是<strong>吞吐量高</strong>。时效性ms级可用性非常高, kafka是分布式的,一个数据多个副本,少数机器宕机,不会丢失数据,不会导致不可用,消费者采用Pull方式获取消息,消息有序,通过控制能够保证所有消息被消费且仅被消费一次;有优秀的第三方KafkaWeb管理界面Kafka-Manager;在日志领域比较成熟,被多家公司和多个开源项目使用;功能支持:功能较为简单,主要支持简单的MQ功能,在大数据领域的实时计算以及<strong>日志采集</strong>被大规模使用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;缺点：Kafka单机超过64个队列/分区, Load会发生明显的飙高现象,队列越多, load越高,发送消息响应时间变长,使用短轮询方式,实时性取决于轮询间隔时间,消费失败不支持重试;支持消息顺序,但是一台代理宕机后,就会产生消息乱序,<strong>社区更新较慢</strong>。</p></li><li><p>RocketMQ</p><p>&nbsp;&nbsp;&nbsp;&nbsp;RocketMQ出自阿里巴巴的开源产品,用Java语言实现,在设计时参考了Kafka,并做出了自己的一些改进。被阿里巴巴广泛应用在订单,交易,充值,流计算,消息推送,日志流式处理, binglog分发等场景。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;优点：<strong>单机吞吐量十万级</strong>,可用性非常高,分布式架构,<strong>消息可以做到0丢失</strong>,MQ功能较为完善,还是分布式的,扩展性好,<strong>支持10亿级别的消息堆积</strong>,不会因为堆积导致性能下降,源码是java我们可以自己阅读源码,定制自己公司的MQ</p><p>&nbsp;&nbsp;&nbsp;&nbsp;缺点：<strong>支持的客户端语言不多</strong>, 目前是java及c++,其中c++不成熟;社区活跃度一般,没有在MQ核心中去实现JMS等接口,有些系统要迁移需要修改大量代码</p></li><li><p>RabbitMQ</p><p>&nbsp;&nbsp;&nbsp;&nbsp;2007年发布,是一个在AMQP(高级消息队列协议)基础上完成的,可复用的企业消息系统,是<strong>当前最主流的消息中间件之一</strong>。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;优点：由于 erlang 语言的高并发特性,性能较好;<strong>吞吐量到万级</strong>, MQ功能比较完备,健壮、稳定、易用、跨平台、<strong>支持多种语言</strong>如: Python,Ruby. .NET、 Java, JMS、 C, PHP, ActionScript, XMPP, STOMP等,支持 AJAX 文档齐全;开源提供的管理界面非常棒,用起来很好用,<strong>社区活跃度高</strong>;更新频率相当高<a href="https://www.rabbitmq.com/news.html">https://www.rabbitmq.com/news.html</a></p><p>​    缺点：商业版需要收费,学习成本较高</p></li></ol><h3 id="1-1-4-MQ-的选择"><a href="#1-1-4-MQ-的选择" class="headerlink" title="1.1.4 MQ 的选择"></a>1.1.4 MQ 的选择</h3><ol><li><p>Kafka</p><p>&nbsp;&nbsp;&nbsp;&nbsp;主要特点是基于Pull的模式来处理消息消费,追求高吞吐量,一开始的目的就是用于日志收集和传输,适合产生大量数据的互联网服务的数据收集业务。大型公司建议可以选用,如果有日志采集功能,肯定是首选 kafka 了。</p><p>尚硅谷官网 kafka 视频连接<a href="http://www.gulixueyuan.com/course/330/tasks">http://www.gulixueyuan.com/course/330/tasks</a></p></li><li><p>RocketMQ</p><p>&nbsp;&nbsp;&nbsp;&nbsp;天生为<strong>金融互联网</strong>领域而生,对于可靠性要求很高的场景,尤其是电商里面的订单扣款,以及业务削峰,在大量交易涌入时,后端可能无法及时处理的情况。RoketMQ 在稳定性上可能更值得信赖,这些业务场景在阿里双11已经经历了多次考验,如果你的业务有上述并发场景,建议可以选择 RocketMQ。</p></li><li><p>RabbitMQ</p><p>&nbsp;&nbsp;&nbsp;&nbsp;结合 erlang 语言本身的并发优势,性能好<strong>时效性微秒级,社区活跃度也比较高</strong>,管理界面用起来十分方便,如果你的<strong>数据量没有那么大</strong>,中小型公司优先选择功能比较完备的RabbitMQ。</p></li></ol><h2 id="1-2-RabbitMQ"><a href="#1-2-RabbitMQ" class="headerlink" title="1.2. RabbitMQ"></a>1.2. RabbitMQ</h2><h3 id="1-2-1-RabbitMQ-的概念"><a href="#1-2-1-RabbitMQ-的概念" class="headerlink" title="1.2.1. RabbitMQ 的概念"></a>1.2.1. RabbitMQ 的概念</h3><p>​    RabbitMQ 是一个消息中间件:它接受并转发消息。你可以把它当做一个快递站点,当你要发送一个包裹时,你把你的包裹放到快递站,快递员最终会把你的快递送到收件人那里,按照这种逻辑 RabbitMQ 是一个快递站,一个快递员帮你传递快件。RabbitMQ 与快递站的主要区别在于,它不处理快件而是接收,存储和转发消息数据。</p><h3 id="1-2-2-四大核心概念"><a href="#1-2-2-四大核心概念" class="headerlink" title="1.2.2. 四大核心概念"></a>1.2.2. 四大核心概念</h3><p>生产者<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;产生数据发送消息的程序是生产者</p><p>交换机</p><p>&nbsp;&nbsp;&nbsp;&nbsp;交换机是 RabbitMQ 非常重要的一个部件,一方面它接收来自生产者的消息,另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息,是将这些消息推送到特定队列还是推送到多个队列,亦或者是把消息丢弃,这个得有交换机类型决定。</p><p>队列</p><p>&nbsp;&nbsp;&nbsp;&nbsp;队列是 RabbitMQ 内部使用的一种数据结构,尽管消息流经 RabbitMQ 和应用程序,但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束,本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列,许多消费者可以尝试从一个队列接收数据。这就是我们使用队列的方式。</p><p>消费者</p><p>&nbsp;&nbsp;&nbsp;&nbsp;消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者,消费者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</p><h3 id="1-2-3-RabbitMQ-核心部分"><a href="#1-2-3-RabbitMQ-核心部分" class="headerlink" title="1.2.3 RabbitMQ 核心部分"></a>1.2.3 RabbitMQ 核心部分</h3><p><img src="/2021/112924394/RabbitMQ_hexinbufen_20211130165108.png" alt="图4 RabbitMQ 核心部分"></p><h3 id="1-2-4-各个名词介绍"><a href="#1-2-4-各个名词介绍" class="headerlink" title="1.2.4 各个名词介绍"></a>1.2.4 各个名词介绍</h3><p><img src="/2021/112924394/gegemingcijieshao_20211201165655.png" alt="图5 各个名词介绍"></p><p><strong>Broker（消息实体）</strong>：接收和分发消息的应用, RabbitMQ Server就是Message Broker。</p><p><strong>Virtual host</strong>：出于多租户和安全因素设计的,把AMQP的基本组件划分到一个虚拟的分组中,类似于网络中的namespace概念。当多个不同的用户使用同一个RabbitMQ server提供的服务时,可以划分出多个vhost,每个用户在自己的vhost创建exchange /queue等。</p><p><strong>Connection（连接）</strong>：publisher（发布消息）/ consumer（接收消息）和broker（消息实体）之间的TCP连接</p><p><strong>Channel（信道）</strong>：如果每一次访问RabbitMQ都建立一个Connection,在消息量大的时候建立 TCPConnection 的开销将是巨大的,效率也较低。Channel 是在 connection 内部建立的逻辑连接,如果应用程序支持多线程,通常每个thread创建单独的channel进行通讯, AMQP method 包含了 channel id 帮助客户端和 message broker 识别channel,所以 channel 之间是完全隔离的。<strong>Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP Connection 的开销。</strong></p><p><strong>Exchange</strong>：message到达broker的第一站,根据分发规则,匹配查询表中的routing key,分发消息到queue中去。常用的类型有: direct (point-to-point), topic (publish-subscribe) and fanout(multicast)</p><p><strong>Queue</strong>：消息最终被送到这里等待consumer取走。</p><p><strong>Binding</strong>：exchange和queue之间的虚拟连接, binding中可以包含routing key, Binding信息被保存到exchange中的查询表中,用于message的分发依据。</p><h3 id="1-2-5-安装"><a href="#1-2-5-安装" class="headerlink" title="1.2.5 安装"></a>1.2.5 安装</h3><ol><li><p>官网地址<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p></li><li><p>文件上传</p></li></ol><p>  &nbsp;&nbsp;&nbsp;&nbsp;上传到/usr/local/software目录下(如果没有software需要自己创建)</p><p><img src="/2021/112924394/wenjianshangchuan.png" alt="图6 文件上传"></p><ol start="3"><li><p>安装文件(分别按照以下顺序安装)</p><p> &nbsp;&nbsp;&nbsp;&nbsp;<code>rpm-ivh erlang-21.3-1.el7.x86_64.rpm</code></p><p> &nbsp;&nbsp;&nbsp;&nbsp;<code>yum install socat -y</code></p><p> &nbsp;&nbsp;&nbsp;&nbsp;<code>rpm-ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm</code></p></li><li><p>常用命令(按照以下顺序执行)</p><p> &nbsp;&nbsp;&nbsp;&nbsp;添加开机启动RabbitMQ服务<br> &nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;<code>chkconfig rabbitmq-server on</code></p><p> &nbsp;&nbsp;&nbsp;&nbsp;启动服务<br> &nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;<code>/sbin/service rabbitmq-server start</code><br> &nbsp;&nbsp;&nbsp;&nbsp;查看服务状态<br> &nbsp;&nbsp;&nbsp;&nbsp;    &nbsp;&nbsp;&nbsp;&nbsp;<code>/sbin/service rabbitmq-server status</code></p><p> <img src="/2021/112924394/chakanfuwuzhuangtai_20211209111937.png" alt="图7 查看服务状态"></p><p> &nbsp;&nbsp;&nbsp;&nbsp;停止服务(选择执行)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>/sbin/service rabbitmq-server stop</code><br> &nbsp;&nbsp;&nbsp;&nbsp;开启web管理插件<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>rabbitmq-plugins enable rabbitmg_management</code><br> &nbsp;&nbsp;&nbsp;&nbsp;用默认账号密码(guest)访问地址<a href="http://localhost:15672/%E5%87%BA%E7%8E%B0%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98">http://localhost:15672/出现权限问题</a></p></li><li><p>添加一个新的用户(guest账号无法登录情况)</p><p> &nbsp;&nbsp;&nbsp;&nbsp;创建账号<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>rabbitmgctl add_user admin 123</code><br> &nbsp;&nbsp;&nbsp;&nbsp;设置用户角色<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>rabbitmactl set user tags admin administrator</code><br> &nbsp;&nbsp;&nbsp;&nbsp;设置用户权限<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>set_permissions [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;read&gt;</code><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>rabbitmactl set permissions-p &quot;/&quot; admin &quot;**&quot;&quot;*&quot;</code><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用户user-_admin具有/vhost1这个virtual host中所有资源的配置、写、读权限<br> &nbsp;&nbsp;&nbsp;&nbsp;当前用户和角色<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>rabbitmactl list_users</code></p></li><li><p>再次利用admin用户登录</p><p><img src="/2021/112924394/admin_20211210151851.png" alt="图8 admin用户登录"></p></li><li><p>重置命令<br> &nbsp;&nbsp;&nbsp;&nbsp;关闭应用的命令为<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>rabbitmqctl stop_app</code><br> &nbsp;&nbsp;&nbsp;&nbsp;清除的命令为<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>rabbitmqctl reset</code><br> &nbsp;&nbsp;&nbsp;&nbsp;重新启动命令为<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>rabbitmqctl start_app</code></p></li></ol><h1 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2. Hello World"></a>2. Hello World</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;在本教程的这一部分中,我们将用Java编写两个程序。发送单个消息的生产者和接收消息并打印出来的消费者。我们将介绍Java API中的一些细节。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在下图中, “P”是我们的生产者, “C”是我们的消费者。中间的框是一个队列-RabbitMQ代表使用者保留的消息缓冲区</p><p><img src="/2021/112924394/xiaoxihuanchongqu_20211210152851.png" alt="图8 admin用户登录"></p><h2 id="2-1-依赖"><a href="#2-1-依赖" class="headerlink" title="2.1 依赖"></a>2.1 依赖</h2><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        rabbitmq 依赖客户端--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--操作文件流的一个依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-消息生产者"><a href="#2-2-消息生产者" class="headerlink" title="2.2 消息生产者"></a>2.2 消息生产者</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @version 1.0 * @ClassName Producer * @Description TODO 生产者：发消息 * @Author YKY * @Date 2021/12/13 14:39 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 队列名称</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送消息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个连接工厂</span>        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 工厂IP 连接RabbitMQ的队列</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用户名</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 密码</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建连接</span>        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取信道</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 生成一个队列         * 1. 队列名称         * 2. 队列里的消息是否持久化（磁盘）默认情况消息存储在内存中,服务器重启后队列是否还存在         * 3. 该队列是否只供一个消费者进行消费 是否进行消息共享，true：只能一个消费者消费 false：可以多个消费者消费         * 4.是否自动删除 最后一个消费者断开连接以后 队列是否自动删除 true：自动删除 false：不自动删除         * 5. 其他参数         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  发送消息 —— 初次使用</span>        String message <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 发送一个消费         * 1. 发送给哪个交换机         * 2. 路由的 Key 值是哪个 （本次是队列名称）         * 3. 其他参数信息         * 4. 发送消息的消息体         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> QUEUE_NAME<span class="token punctuation">,</span> null<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送消息完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rabbit MQ </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息中间件 </tag>
            
            <tag> Rabbit MQ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
